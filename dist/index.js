import{property as e}from"hybrids";function t(e){switch(typeof e){case"undefined":return;case"number":return Number;case"boolean":return Boolean;case"object":return null===e?null:Array.isArray(e)?Array:Object;case"function":return Function;case"string":default:return String}}function r(e,t){switch(t){case String:case Number:return t(e);case Boolean:return!("false"===e||!e&&""!==e);case Array:return Array.isArray(e)?e:"string"==typeof e?/^\[.*\]$/.test(e)?JSON.parse(e):[]:e?t(e):[];case Object:return JSON.parse(e);case Function:default:return}}const n=new WeakMap,a=new Map;export default function(s,u={}){let c,o,i;return{...e(s,(function(e,b){c=t(s),o=camelToDash(b);const l=e.tagName,f=a.get(l)||new Map;a.set(l,f.set(o,{key:b,type:c}));const A=e.getAttribute(o);return null!==A&&(s=r(A,c),e[b]=s),n.get(e)||(i=new MutationObserver(t=>{const n=a.get(l);t.forEach(({attributeName:t,target:a})=>{const s=n.get(t);if(s){const{key:n,type:u}=s,c=r(a.getAttribute(t),u);c!==e[n]&&(a[n]=c)}})}),n.set(e,!0),i.observe(e,{attributes:!0})),u.connect&&u.connect(e,b),()=>{i&&(i.disconnect(),n.delete(e))}})),observe:(e,t,r)=>{!function(e,t,r,n,a){if(n!==a)switch(r){case null:case void 0:break;case Boolean:n?e.setAttribute(t,""):e.removeAttribute(t);break;case Array:null==n||0===n.length?e.removeAttribute(t):e.setAttribute(t,JSON.stringify(n));break;case Object:null==n||0===Object.keys(n).length?e.removeAttribute(t):e.setAttribute(t,JSON.stringify(n));break;case Function:break;case String:""===n||null==n?e.removeAttribute(t):e.setAttribute(t,n);break;case Number:default:null==n?e.removeAttribute(t):e.setAttribute(t,n)}}(e,o,c,t,r),u.observe&&u.observe(e,t,r)}}}export{r as coerceToType,t as getType};
//# sourceMappingURL=index.js.map
