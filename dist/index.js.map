{"version":3,"file":"index.js","sources":["../src/utils/index.js","../src/index.js"],"sourcesContent":["export function getType(value) {\n  switch (typeof value) {\n    case 'undefined': return undefined;\n    case 'number': return Number;\n    case 'boolean': return Boolean;\n    case 'object':\n      if (value === null) return null;\n      if (Array.isArray(value)) return Array;\n      return Object;\n    case 'function': return Function;\n    case 'string':\n    default: return String;\n  }\n}\n\nexport function coerceToType(value, type) {\n  switch (type) {\n    case String:\n    case Number:\n      return type(value);\n    case Boolean:\n      if (value === 'false' || (!value && value !== '')) return false;\n      return true;\n    case Array:\n      if (Array.isArray(value)) return value;\n      if (typeof value === 'string') {\n        return /^\\[.*\\]$/.test(value) ? JSON.parse(value) : [];\n      }\n      if (value) return type(value);\n      return [];\n    case Object:\n      return JSON.parse(value);\n    case Function:\n      return undefined;\n    default: return undefined;\n  }\n}\n\nexport function setAttr(host, attrName, type, val, oldValue) {\n  if (val !== oldValue) {\n    switch (type) {\n      case null:\n      case undefined:\n        break;\n      case Boolean:\n        if (val) {\n          host.setAttribute(attrName, '');\n        } else {\n          host.removeAttribute(attrName);\n        }\n        break;\n      case Array:\n        if (val === undefined || val === null || val.length === 0) {\n          host.removeAttribute(attrName);\n        } else {\n          host.setAttribute(attrName, JSON.stringify(val));\n        }\n        break;\n      case Object:\n        if (val === undefined || val === null || Object.keys(val).length === 0) {\n          host.removeAttribute(attrName);\n        } else {\n          host.setAttribute(attrName, JSON.stringify(val));\n        }\n        break;\n      case Function:\n        break;\n      case String:\n        if (val === '' || val === undefined || val === null) {\n          host.removeAttribute(attrName);\n        } else {\n          host.setAttribute(attrName, val);\n        }\n        break;\n      case Number:\n      default:\n        if (val === undefined || val === null) {\n          host.removeAttribute(attrName);\n        } else {\n          host.setAttribute(attrName, val);\n        }\n        break;\n    }\n  }  \n}\n","import { property, camelToDash } from 'hybrids';\nimport { getType, coerceToType, setAttr } from './utils';\n\n// Keep track of any instances of any components that use reflected attributes.\nconst hosts = new WeakMap();\n\n// Keep track of all reflected attributes, by component tag name.\nconst reflectedAttributes = new Map();\n\nexport default function reflect(value, methods = {}) {\n  let type;\n  let attrName;\n  let observer;\n  return {\n    ...property(value, function connect(host, key) {\n      type = getType(value);\n      attrName = camelToDash(key);\n      const tagName = host.tagName;\n\n      // Assign all reflected attributes to a map whose lookup is the tagName.\n      const attrMap = reflectedAttributes.get(tagName) || new Map();\n      reflectedAttributes.set(tagName, attrMap.set(attrName, {key, type}));\n\n      // Set coerced value for key, as derived from attribute.\n      const attrValue = host.getAttribute(attrName);\n      if (attrValue !== null) {\n        value = coerceToType(attrValue, type);\n        host[key] = value;\n      }\n\n      // Only assign a single mutation observer to watch any single host, no matter how many reflected keys it has.\n      const hasObserver = hosts.get(host);\n      if (!hasObserver) {\n        observer = new MutationObserver((mutations) => {\n          const watchedAttrs = reflectedAttributes.get(tagName);\n          mutations.forEach(({ attributeName, target }) => {\n            const watchedAttr = watchedAttrs.get(attributeName);\n            if (watchedAttr) {\n              const {key, type} = watchedAttr;\n              const attrValue = target.getAttribute(attributeName);\n              const value = coerceToType(attrValue, type);\n              if (value !== host[key]) {\n                target[key] = value;\n              }\n            }\n          });\n        });\n        hosts.set(host, true);\n        observer.observe(host, { attributes: true });\n      }\n\n      // Call any individually defined `connect` method the property may have.\n      if (methods.connect) methods.connect(host, key);\n\n      // Once a host disconnects, stop watching it and remove it from WeakMap.\n      // Only run code once no matter how many reflected keys it has.\n      return () => {\n        if (observer) {\n          observer.disconnect();\n          hosts.delete(host);  \n        }\n      }\n    }),\n    observe: (host, value, oldValue) => {\n      // If a reflected property changes, reflect that change to the attribute.\n      setAttr(host, attrName, type, value, oldValue)\n\n      // Call any individually defined `observe` method the property may have.\n      if (methods.observe) methods.observe(host, value, oldValue);\n    },\n  }\n}\n\nexport {\n  getType,\n  coerceToType,\n}\n"],"names":["getType","value","Number","Boolean","Array","isArray","Object","Function","String","coerceToType","type","test","JSON","parse","hosts","WeakMap","reflectedAttributes","Map","methods","attrName","observer","property","host","key","camelToDash","tagName","attrMap","get","set","attrValue","getAttribute","MutationObserver","mutations","watchedAttrs","forEach","attributeName","target","watchedAttr","observe","attributes","connect","disconnect","delete","oldValue","val","undefined","setAttribute","removeAttribute","length","stringify","keys","setAttr"],"mappings":"oDAAO,SAASA,EAAQC,iBACPA,OACR,uBACA,gBAAiBC,WACjB,iBAAkBC,YAClB,gBACW,OAAVF,EAAuB,KACvBG,MAAMC,QAAQJ,GAAeG,MAC1BE,WACJ,kBAAmBC,aACnB,wBACWC,QAIb,SAASC,EAAaR,EAAOS,UAC1BA,QACDF,YACAN,cACIQ,EAAKT,QACTE,gBACW,UAAVF,IAAuBA,GAAmB,KAAVA,QAEjCG,aACCA,MAAMC,QAAQJ,GAAeA,EACZ,iBAAVA,EACF,WAAWU,KAAKV,GAASW,KAAKC,MAAMZ,GAAS,GAElDA,EAAcS,EAAKT,GAChB,QACJK,cACIM,KAAKC,MAAMZ,QACfM,yBC5BT,MAAMO,EAAQ,IAAIC,QAGZC,EAAsB,IAAIC,mBAEhC,SAAgChB,EAAOiB,EAAU,QAC3CR,EACAS,EACAC,QACG,IACFC,EAASpB,GAAO,SAAiBqB,EAAMC,GACxCb,EAAOV,EAAQC,GACfkB,EAAWK,EAAYD,SACjBE,EAAUH,EAAKG,QAGfC,EAAUV,EAAoBW,IAAIF,IAAY,IAAIR,IACxDD,EAAoBY,IAAIH,EAASC,EAAQE,IAAIT,EAAU,CAACI,IAAAA,EAAKb,KAAAA,WAGvDmB,EAAYP,EAAKQ,aAAaX,UAClB,OAAdU,IACF5B,EAAQQ,EAAaoB,EAAWnB,GAChCY,EAAKC,GAAOtB,GAIMa,EAAMa,IAAIL,KAE5BF,EAAW,IAAIW,iBAAkBC,UACzBC,EAAejB,EAAoBW,IAAIF,GAC7CO,EAAUE,QAAQ,EAAGC,cAAAA,EAAeC,OAAAA,YAC5BC,EAAcJ,EAAaN,IAAIQ,MACjCE,EAAa,OACTd,IAACA,EAADb,KAAMA,GAAQ2B,EAEdpC,EAAQQ,EADI2B,EAAON,aAAaK,GACAzB,GAClCT,IAAUqB,EAAKC,KACjBa,EAAOb,GAAOtB,QAKtBa,EAAMc,IAAIN,GAAM,GAChBF,EAASkB,QAAQhB,EAAM,CAAEiB,YAAY,KAInCrB,EAAQsB,SAAStB,EAAQsB,QAAQlB,EAAMC,GAIpC,KACDH,IACFA,EAASqB,aACT3B,EAAM4B,OAAOpB,QAInBgB,QAAS,CAAChB,EAAMrB,EAAO0C,MDzBpB,SAAiBrB,EAAMH,EAAUT,EAAMkC,EAAKD,MAC7CC,IAAQD,SACFjC,QACD,eACAmC,aAEA1C,QACCyC,EACFtB,EAAKwB,aAAa3B,EAAU,IAE5BG,EAAKyB,gBAAgB5B,cAGpBf,MACCwC,MAAAA,GAAoD,IAAfA,EAAII,OAC3C1B,EAAKyB,gBAAgB5B,GAErBG,EAAKwB,aAAa3B,EAAUP,KAAKqC,UAAUL,eAG1CtC,OACCsC,MAAAA,GAAiE,IAA5BtC,OAAO4C,KAAKN,GAAKI,OACxD1B,EAAKyB,gBAAgB5B,GAErBG,EAAKwB,aAAa3B,EAAUP,KAAKqC,UAAUL,eAG1CrC,oBAEAC,OACS,KAARoC,GAAAA,MAAcA,EAChBtB,EAAKyB,gBAAgB5B,GAErBG,EAAKwB,aAAa3B,EAAUyB,cAG3B1C,eAEC0C,MAAAA,EACFtB,EAAKyB,gBAAgB5B,GAErBG,EAAKwB,aAAa3B,EAAUyB,ICdhCO,CAAQ7B,EAAMH,EAAUT,EAAMT,EAAO0C,GAGjCzB,EAAQoB,SAASpB,EAAQoB,QAAQhB,EAAMrB,EAAO0C"}