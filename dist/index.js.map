{"version":3,"file":"index.js","sources":["../node_modules/hybrids/src/utils.js","../src/utils/index.js","../src/index.js"],"sourcesContent":["const camelToDashMap = new Map();\nexport function camelToDash(str) {\n  let result = camelToDashMap.get(str);\n  if (result === undefined) {\n    result = str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    camelToDashMap.set(str, result);\n  }\n  return result;\n}\n\nexport function pascalToDash(str) {\n  return camelToDash(str.replace(/((?!([A-Z]{2}|^))[A-Z])/g, '-$1'));\n}\n\nexport function dispatch(host, eventType, options = {}) {\n  return host.dispatchEvent(new CustomEvent(eventType, { bubbles: false, ...options }));\n}\n\nexport function shadyCSS(fn, fallback) {\n  const shady = window.ShadyCSS;\n\n  /* istanbul ignore next */\n  if (shady && !shady.nativeShadow) {\n    return fn(shady);\n  }\n\n  return fallback;\n}\n\nexport function stringifyElement(element) {\n  const tagName = String(element.tagName).toLowerCase();\n  return `<${tagName}>`;\n}\n\nexport const IS_IE = 'ActiveXObject' in window;\nexport const deferred = Promise.resolve();\n","export function getType(value) {\n  switch (typeof value) {\n    case 'undefined': return undefined;\n    case 'number': return Number;\n    case 'boolean': return Boolean;\n    case 'object':\n      if (value === null) return null;\n      if (Array.isArray(value)) return Array;\n      return Object;\n    case 'function': return Function;\n    case 'string':\n    default: return String;\n  }\n}\n\nexport function coerceToType(value, type) {\n  switch (type) {\n    case String:\n    case Number:\n      return type(value);\n    case Boolean:\n      if (value === 'false' || (!value && value !== '')) return false;\n      return true;\n    case Array:\n      if (Array.isArray(value)) return value;\n      if (typeof value === 'string') {\n        return /^\\[.*\\]$/.test(value) ? JSON.parse(value) : [];\n      }\n      if (value) return type(value);\n      return [];\n    case Object:\n      return JSON.parse(value);\n    case Function:\n      return undefined;\n    default: return undefined;\n  }\n}\n\nexport function setAttr(host, attrName, type, val, oldValue) {\n  if (val !== oldValue) {\n    switch (type) {\n      case null:\n      case undefined:\n        break;\n      case Boolean:\n        if (val) {\n          host.setAttribute(attrName, '');\n        } else {\n          host.removeAttribute(attrName);\n        }\n        break;\n      case Array:\n        if (val === undefined || val === null || val.length === 0) {\n          host.removeAttribute(attrName);\n        } else {\n          host.setAttribute(attrName, JSON.stringify(val));\n        }\n        break;\n      case Object:\n        if (val === undefined || val === null || Object.keys(val).length === 0) {\n          host.removeAttribute(attrName);\n        } else {\n          host.setAttribute(attrName, JSON.stringify(val));\n        }\n        break;\n      case Function:\n        break;\n      case String:\n        if (val === '' || val === undefined || val === null) {\n          host.removeAttribute(attrName);\n        } else {\n          host.setAttribute(attrName, val);\n        }\n        break;\n      case Number:\n      default:\n        if (val === undefined || val === null) {\n          host.removeAttribute(attrName);\n        } else {\n          host.setAttribute(attrName, val);\n        }\n        break;\n    }\n  }  \n}\n","import { property } from 'hybrids';\nimport { camelToDash } from 'hybrids/src/utils';\nimport { getType, coerceToType, setAttr } from './utils';\n\n// Keep track of any instances of any components that use reflected attributes.\nconst hosts = new WeakMap();\n\n// Keep track of all reflected attributes, by component tag name.\nconst reflectedAttributes = new Map();\n\nexport default function reflect(value, methods = {}) {\n  let type;\n  let attrName;\n  let observer;\n  return {\n    ...property(value, function connect(host, key) {\n      type = getType(value);\n      attrName = camelToDash(key);\n      const tagName = host.tagName;\n\n      // Assign all reflected attributes to a map whose lookup is the tagName.\n      const attrMap = reflectedAttributes.get(tagName) || new Map();\n      reflectedAttributes.set(tagName, attrMap.set(attrName, {key, type}));\n\n      // Set coerced value for key, as derived from attribute.\n      const attrValue = host.getAttribute(attrName);\n      if (attrValue !== null) {\n        value = coerceToType(attrValue, type);\n        host[key] = value;\n      }\n\n      // Only assign a single mutation observer to watch any single host, no matter how many reflected keys it has.\n      const hasObserver = hosts.get(host);\n      if (!hasObserver) {\n        observer = new MutationObserver((mutations) => {\n          const watchedAttrs = reflectedAttributes.get(tagName);\n          mutations.forEach(({ attributeName, target }) => {\n            const watchedAttr = watchedAttrs.get(attributeName);\n            if (watchedAttr) {\n              const {key, type} = watchedAttr;\n              const attrValue = target.getAttribute(attributeName);\n              const value = coerceToType(attrValue, type);\n              if (value !== host[key]) {\n                target[key] = value;\n              }\n            }\n          });\n        });\n        hosts.set(host, true);\n        observer.observe(host, { attributes: true });\n      }\n\n      // Call any individually defined `connect` method the property may have.\n      let disconnectFn;\n      if (methods.connect) {\n        disconnectFn = methods.connect(host, key);\n      }\n\n      // Once a host disconnects, stop watching it and remove it from WeakMap.\n      // Only run code once no matter how many reflected keys it has.\n      return () => {\n        disconnectFn && disconnectFn();\n        if (observer) {\n          observer.disconnect();\n          hosts.delete(host);  \n        }\n      }\n    }),\n    observe: (host, value, oldValue) => {\n      // If a reflected property changes, reflect that change to the attribute.\n      setAttr(host, attrName, type, value, oldValue)\n\n      // Call any individually defined `observe` method the property may have.\n      if (methods.observe) methods.observe(host, value, oldValue);\n    },\n  }\n}\n\nexport {\n  getType,\n  coerceToType,\n}\n"],"names":["camelToDashMap","Map","getType","value","Number","Boolean","Array","isArray","Object","Function","String","coerceToType","type","test","JSON","parse","hosts","WeakMap","reflectedAttributes","methods","attrName","observer","property","host","key","str","result","get","undefined","replace","toLowerCase","set","camelToDash","tagName","attrMap","attrValue","getAttribute","disconnectFn","MutationObserver","mutations","watchedAttrs","forEach","attributeName","target","watchedAttr","observe","attributes","connect","disconnect","delete","oldValue","val","setAttribute","removeAttribute","length","stringify","keys","setAttr"],"mappings":"mCAAA,MAAMA,EAAiB,IAAIC,ICApB,SAASC,EAAQC,iBACPA,OACR,uBACA,gBAAiBC,WACjB,iBAAkBC,YAClB,gBACW,OAAVF,EAAuB,KACvBG,MAAMC,QAAQJ,GAAeG,MAC1BE,WACJ,kBAAmBC,aACnB,wBACWC,QAIb,SAASC,EAAaR,EAAOS,UAC1BA,QACDF,YACAN,cACIQ,EAAKT,QACTE,gBACW,UAAVF,IAAuBA,GAAmB,KAAVA,QAEjCG,aACCA,MAAMC,QAAQJ,GAAeA,EACZ,iBAAVA,EACF,WAAWU,KAAKV,GAASW,KAAKC,MAAMZ,GAAS,GAElDA,EAAcS,EAAKT,GAChB,QACJK,cACIM,KAAKC,MAAMZ,QACfM,yBC3BT,MAAMO,EAAQ,IAAIC,QAGZC,EAAsB,IAAIjB,mBAEhC,SAAgCE,EAAOgB,EAAU,QAC3CP,EACAQ,EACAC,QACG,IACFC,EAASnB,GAAO,SAAiBoB,EAAMC,GACxCZ,EAAOV,EAAQC,GACfiB,EFhBC,SAAqBK,OACtBC,EAAS1B,EAAe2B,IAAIF,eACjBG,IAAXF,IACFA,EAASD,EAAII,QAAQ,kBAAmB,SAASC,cACjD9B,EAAe+B,IAAIN,EAAKC,IAEnBA,EEUQM,CAAYR,SACjBS,EAAUV,EAAKU,QAGfC,EAAUhB,EAAoBS,IAAIM,IAAY,IAAIhC,IACxDiB,EAAoBa,IAAIE,EAASC,EAAQH,IAAIX,EAAU,CAACI,IAAAA,EAAKZ,KAAAA,WAGvDuB,EAAYZ,EAAKa,aAAahB,OA4BhCiB,SA3Bc,OAAdF,IACFhC,EAAQQ,EAAawB,EAAWvB,GAChCW,EAAKC,GAAOrB,GAIMa,EAAMW,IAAIJ,KAE5BF,EAAW,IAAIiB,iBAAkBC,UACzBC,EAAetB,EAAoBS,IAAIM,GAC7CM,EAAUE,QAAQ,EAAGC,cAAAA,EAAeC,OAAAA,YAC5BC,EAAcJ,EAAab,IAAIe,MACjCE,EAAa,OACTpB,IAACA,EAADZ,KAAMA,GAAQgC,EAEdzC,EAAQQ,EADIgC,EAAOP,aAAaM,GACA9B,GAClCT,IAAUoB,EAAKC,KACjBmB,EAAOnB,GAAOrB,QAKtBa,EAAMe,IAAIR,GAAM,GAChBF,EAASwB,QAAQtB,EAAM,CAAEuB,YAAY,KAKnC3B,EAAQ4B,UACVV,EAAelB,EAAQ4B,QAAQxB,EAAMC,IAKhC,KACLa,GAAgBA,IACZhB,IACFA,EAAS2B,aACThC,EAAMiC,OAAO1B,QAInBsB,QAAS,CAACtB,EAAMpB,EAAO+C,MD9BpB,SAAiB3B,EAAMH,EAAUR,EAAMuC,EAAKD,MAC7CC,IAAQD,SACFtC,QACD,eACAgB,aAEAvB,QACC8C,EACF5B,EAAK6B,aAAahC,EAAU,IAE5BG,EAAK8B,gBAAgBjC,cAGpBd,MACC6C,MAAAA,GAAoD,IAAfA,EAAIG,OAC3C/B,EAAK8B,gBAAgBjC,GAErBG,EAAK6B,aAAahC,EAAUN,KAAKyC,UAAUJ,eAG1C3C,OACC2C,MAAAA,GAAiE,IAA5B3C,OAAOgD,KAAKL,GAAKG,OACxD/B,EAAK8B,gBAAgBjC,GAErBG,EAAK6B,aAAahC,EAAUN,KAAKyC,UAAUJ,eAG1C1C,oBAEAC,OACS,KAARyC,GAAAA,MAAcA,EAChB5B,EAAK8B,gBAAgBjC,GAErBG,EAAK6B,aAAahC,EAAU+B,cAG3B/C,eAEC+C,MAAAA,EACF5B,EAAK8B,gBAAgBjC,GAErBG,EAAK6B,aAAahC,EAAU+B,ICThCM,CAAQlC,EAAMH,EAAUR,EAAMT,EAAO+C,GAGjC/B,EAAQ0B,SAAS1B,EAAQ0B,QAAQtB,EAAMpB,EAAO+C"}